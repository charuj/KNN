import numpy as np
from l2_distance import l2_distance

def run_knn(k, train_data, train_labels, valid_data):
    """Uses the supplied training inputs and labels to make
    predictions for validation data using the K-nearest neighbours
    algorithm.

    Note: N_TRAIN is the number of training examples,
          N_VALID is the number of validation examples, 
          and M is the number of features per example.

    Inputs:
        k:            The number of neighbours to use for classification 
                      of a validation example.
        train_data:   The N_TRAIN x M array of training
                      data.
        train_labels: The N_TRAIN x 1 vector of training labels
                      corresponding to the examples in train_data 
                      (must be binary).
        valid_data:   The N_VALID x M array of data to
                      predict classes for.

    Outputs:
        valid_labels: The N_VALID x 1 vector of predicted labels 
                      for the validation data.
    """

    dist = l2_distance(valid_data.T, train_data.T)
    nearest = np.argsort(dist, axis=1)[:,:k]

    train_labels = train_labels.reshape(-1)
    valid_labels = train_labels[nearest]

    # note this only works for binary labels
    valid_labels = (np.mean(valid_labels, axis=1) >= 0.5).astype(np.int)
    valid_labels = valid_labels.reshape(-1,1)

    return valid_labels
mt=np.load("mnist_train.npz")
mtv=np.load("mnist_valid.npz")
test=np.load("mnist_test.npz")

list_classrates=[]
plot_k=[]

for k in range (1,10,2):

    traini=mt ["train_inputs.npy"]
    traint=mt["train_targets.npy"]
    validin=mtv["valid_inputs"]
    validtar=mtv["valid_targets"]
    knn= run_knn(k,traini, traint,validin )

    size= validtar.shape[0]
    diff= knn-validtar
    class_rate= diff/size

    absdiff= np.abs(diff)
    absdiff=absdiff.reshape(50)


    sum= np.sum(absdiff)
    num_correct= size - sum
    num_correct= float(num_correct)
    class_rate= num_correct/size

    plot_k.append(k)
    list_classrates.append(class_rate)

print list_classrates
print plot_k

import matplotlib.pyplot as plt
plt.plot([plot_k], [list_classrates], "ro")
plt.axis([0, 10, 0, 1])
plt.show()

#chosen k for test set

list_k=[5,7,9] # check and change this k
testinput=test["test_inputs"]
testtarget=test["test_targets"]
classrate_list = []

for k in list_k:
    knn= run_knn(k,traini, traint,testinput )

    size= testtarget.shape[0]
    diff= knn-testtarget
    class_rate= diff/size

    absdiff= np.abs(diff)
    absdiff=absdiff.reshape(50)


    sum= np.sum(absdiff)
    num_correct= size - sum
    num_correct= float(num_correct)
    class_rate= num_correct/size
     # so few cases in test cases thus class rate higher than in validation cases
    classrate_list.append(class_rate)
print classrate_list
print list_k
plt.plot([list_k], [classrate_list], "ro")
plt.axis([0, 10, 0, 1])
plt.show()
